import azure.functions as func
from azure.functions import FunctionApp
from azure.functions import HttpResponse


app = FunctionApp()

def fetch_weather_features(date_str):
    import logging
    import os
    import json
    from datetime import datetime, timedelta
    import lightgbm as lgb
    import pandas as pd
    import numpy as np
    import requests
    logging.info("openmeteoAPI has coming")
    """Open-Meteoから天気データを取得し、特徴量を作成"""
    latitude, longitude = 35.6812, 139.7671  # 東京駅
    target_day = pd.to_datetime(date_str).date()
    today = datetime.now().date()

    if target_day <= today:
        start_date = (target_day - timedelta(days=10)).isoformat()
        end_date = target_day.isoformat()
        api_type = "archive"
    else:
        if (target_day - today).days > 15:
            raise ValueError("未来予測は最大16日先まで対応しています。")
        start_date = (target_day - timedelta(days=9)).isoformat()
        end_date = (target_day + timedelta(days=1)).isoformat()
        api_type = "forecast"

    url = (
        f"https://{api_type}-api.open-meteo.com/v1/{api_type}?"
        f"latitude={latitude}&longitude={longitude}"
        f"&start_date={start_date}&end_date={end_date}"
        f"&daily=temperature_2m_mean,precipitation_sum,wind_speed_10m_mean,"
        f"weather_code,shortwave_radiation_sum"
        f"&timezone=Asia%2FTokyo"
    )

    response = requests.get(url)
    logging.info("I got it")
    print(response)

    data = response.json()["daily"]
    logging.info("I got jsons")
    df = pd.DataFrame(data)
    logging.info("I got jsons2")
    df["time"] = pd.to_datetime(df["time"])
    logging.info("I got json3s")
    df.set_index("time", inplace=True)
    logging.info("I got jsons4")

    if pd.to_datetime(date_str) not in df.index:
        raise ValueError("指定された日付の天気データが存在しません。")


    df["temp_10d_avg"] = df["temperature_2m_mean"].rolling(window=10, min_periods=1).mean()
    df["temp_diff"] = df["temperature_2m_mean"] - df["temp_10d_avg"]
    df["weekday"] = df.index.dayofweek

    feature_cols = [
        "temperature_2m_mean", "precipitation_sum", "wind_speed_10m_mean",
        "weekday", "temp_diff", "temp_10d_avg", "weather_code", "shortwave_radiation_sum"
    ]
    logging.info("I got features")

    return df.loc[[pd.to_datetime(date_str)], feature_cols]


def predict_beer_sales(date_obj):
    import logging
    import sys
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='shift-jis')
    import os
    import json
    from datetime import datetime, timedelta
    import lightgbm as lgb
    import pandas as pd
    import numpy as np
    import requests
    logging.info("Lets predicting")
    """各ビールの販売予測を実施"""
    feature_df = fetch_weather_features(date_obj.isoformat())

    target_cols = [
        "pale_ale", "lager", "ipa",
        "white", "dark", "fruit"]


    predictions = {}

    for col in target_cols:
        model_filename = f"model_{col}.txt"
        logging.info("I got filename")
        # 一時的にファイルパスをフル指定して確認する
        model_path = os.path.join(os.path.dirname(__file__), model_filename)
        print(f"Trying to load model from: {model_path}")
        if not os.path.exists(model_path):
            print(f"モデルファイルが見つかりません: {model_path}")
            raise FileNotFoundError(f"モデルファイル {model_filename} が存在しません。")


        model = lgb.Booster(model_file=model_path)
        pred = model.predict(feature_df)[0]
        predictions[col] = round(pred, 2)
    
    logging.info("I predicted")

    return {
        "date": date_obj.isoformat(),
        "predictions": predictions
    }

@app.function_name(name="pred")
@app.route(route="pred", methods=["GET"])
def pred(req: func.HttpRequest) -> func.HttpResponse:

    import logging
    import os
    import json
    from datetime import datetime, timedelta
    import lightgbm as lgb
    import pandas as pd
    import numpy as np
    import requests
    logging.basicConfig(level=logging.INFO)
    logging.info("beerAPI has coming")

    date_str = req.params.get("date")
    if not date_str:
        try:
            req_body = req.get_json()
            date_str = req_body.get("date")
        except Exception:
            return HttpResponse("日付(date)を指定してください。", status_code=400)

    if not date_str:
        return HttpResponse("日付(date)が見つかりません。", status_code=400)

    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        return HttpResponse("日付形式が正しくありません。YYYY-MM-DD形式で指定してください。", status_code=400)

    try:
        result = predict_beer_sales(date_obj)
        return HttpResponse(json.dumps(result, ensure_ascii=False), mimetype="application/json")
    except Exception as e:
        logging.error(f"pred_error: {str(e)}")
        return HttpResponse(f"予測に失敗しました: {str(e)}", status_code=500)


