import azure.functions as func
from azure.functions import FunctionApp, HttpResponse

app = FunctionApp()

# -------- 天気データの一括取得 --------
def fetch_weather_features_bulk():
    import logging
    import pandas as pd
    from datetime import datetime, timedelta
    import requests

    logging.info("Fetching weather data in bulk")
    latitude, longitude = 35.6812, 139.7671  # 東京駅
    today = datetime.now().date()
    start_date = today.isoformat()
    end_date = (today + timedelta(days=16)).isoformat()

    url = (
        f"https://forecast-api.open-meteo.com/v1/forecast?"
        f"latitude={latitude}&longitude={longitude}"
        f"&start_date={start_date}&end_date={end_date}"
        f"&daily=temperature_2m_mean,precipitation_sum,wind_speed_10m_mean,"
        f"weather_code,shortwave_radiation_sum"
        f"&timezone=Asia%2FTokyo"
    )

    response = requests.get(url)
    if response.status_code != 200:
        raise Exception("天気APIの呼び出しに失敗しました。")

    data = response.json()["daily"]
    df = pd.DataFrame(data)
    df["time"] = pd.to_datetime(df["time"])
    df.set_index("time", inplace=True)

    df["temp_10d_avg"] = df["temperature_2m_mean"].rolling(window=10, min_periods=1).mean()
    df["temp_diff"] = df["temperature_2m_mean"] - df["temp_10d_avg"]
    df["weekday"] = df.index.dayofweek

    feature_cols = [
        "temperature_2m_mean", "precipitation_sum", "wind_speed_10m_mean",
        "weekday", "temp_diff", "temp_10d_avg", "weather_code", "shortwave_radiation_sum"
    ]

    return df[feature_cols]

# -------- ビール販売量の一括予測 --------
def predict_beer_sales_bulk():
    import logging
    import os
    import lightgbm as lgb
    import pandas as pd

    logging.info("Starting bulk prediction")
    feature_df = fetch_weather_features_bulk()

    target_cols = ["pale_ale", "lager", "ipa", "white", "dark", "fruit"]
    predictions = {}

    for col in target_cols:
        model_filename = f"model_{col}.txt"
        model_path = os.path.join(os.path.dirname(__file__), model_filename)
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"モデルファイル {model_filename} が存在しません。")

        model = lgb.Booster(model_file=model_path)
        pred_values = model.predict(feature_df)
        predictions[col] = [round(p, 2) for p in pred_values]

    result = []
    for i, date in enumerate(feature_df.index):
        day_prediction = {"date": date.date().isoformat()}
        for col in target_cols:
            day_prediction[col] = predictions[col][i]
        result.append(day_prediction)

    return result

# -------- Azure Functions エンドポイント定義 --------
@app.function_name(name="pred")
@app.route(route="pred", methods=["GET"])
def pred(req: func.HttpRequest) -> func.HttpResponse:
    import logging
    import json

    logging.basicConfig(level=logging.INFO)
    logging.info("beerAPI bulk prediction has started")

    try:
        results = predict_beer_sales_bulk()
        return HttpResponse(json.dumps(results, ensure_ascii=False), mimetype="application/json")
    except Exception as e:
        logging.error(f"bulk_pred_error: {str(e)}")
        return HttpResponse(f"予測に失敗しました: {str(e)}", status_code=500)
